(page "index.html"
  (:require
    [hoplon.highlight :as hl]
    [cljsjs.highlight.langs.bash]
    [cljsjs.highlight.langs.clojure]
    [cljsjs.highlight.langs.xml]
    [hoplon.spectre-css :as s]))

(def html-head
  (head
    (html-meta :charset "UTF-8")
    (link :href "spectre.min.css" :rel "stylesheet" :type "text/css")
    (link :href "solarized_light.css" :rel "stylesheet" :type "text/css")
    (link :href "font.css" :rel "stylesheet" :type "text/css")
    (link :href "style.css" :rel "stylesheet" :type "text/css")
    (title "Hoplon Spectre Demo")))

(def page-header
  (section :class "section bg-grey"
    (section
      :id "overview"
      :class "grid-hero container grid-960"
      (s/header
        (h3 "Hoplon Spectre.css"))
      (section
        (p
         "This is an adaptation that mostly replicates "
         (a :href "https://picturepan2.github.io/spectre/"
           "the original Spectre.css")
         " page using hoplon-spectre.css to show it's use.")
        (p
         (strong
           "Spectre.css")
         " is a lightweight, responsive and modern CSS framework for faster and extensible development.")
        (ul
          (li
            "lightweight and clean starting point for your project and prototype")
          (li "flexbox, responsive and mobile-friendly layout")
          (li "carefully designed elements")
          (li "built in useful components and utilities")
          (li
            "responsive email templates "
            (s/label-primary "soon"))))
      (section :class "notes text-center"
        (s/button-group
          (s/a-button-primary
            :href "https://github.com/mynomoto/hoplon-spectre.css",
            :target "_blank"
            "Hoplon Spectre GitHub Repo")
          (s/a-button-primary
            :href "https://github.com/picturepan2/spectre",
            :target "_blank"
            "Spectre GitHub Repo")
          (s/a-button-primary
            :href "#getting-started"
            "Documentation"))))))

(def manual-install
  [(h5 "Install manually")
   (p
    "Download the compiled and minified "
    (a
     :href "https://github.com/picturepan2/spectre/tree/master/dist"
     :target "_blank"
     "Spectre CSS file")
    " (about 27KB):")
   (p
    (s/a-button-primary
      :href "https://github.com/picturepan2/spectre/tree/master/dist"
      :target "_blank"
      "Download Spectre.css"))])

(def npm-install
  [(h5 "Install with NPM")
   (p "On a terminal window:")
   (hl/highlight :class "bash"
     "npm install spectre.css")])

(def bower-install
  [(h5 "Install with Bower")
   (p "On a terminal window:")
   (hl/highlight :class "bash"
     "bower install spectre.css")
   (p
    "You need to add the file to your project resources.")
   (p
    "And include it in Hoplon page "
    (code "(head)"))
   (hl/highlight :class "clojure"
     "(link :href \"dist/spectre.min.css\" :rel \"stylesheet\" :type \"text/css\")")])

(def cdn-usage
  [(h5 "Use from a CDN")
   (p
    "Include it in your Hoplon file "
    (code "(head)"))
   (hl/highlight :class "clojure"
     "(link :href \"https://cdnjs.cloudflare.com/ajax/libs/spectre.css/0.1.32/spectre.min.css\" :rel \"stylesheet\" :type \"text/css\")")])

(def getting-started
  (section
    :id "getting-started"
    :class "container grid-960"
    (s/header (h4 "getting started"))
    (section :class "notes"
      (p
       "There are 4 ways to get started with Spectre CSS framework in your projects. You can either manually install or use NPM and Bower.")
      manual-install
      npm-install
      bower-install
      cdn-usage)))

(def compiling-custom-version
  (section
    :id "compiling"
    :class "container grid-960"
    (s/header
      (h4 "compiling custom version"))
    (section :class "notes"
      (p
       "Spectre uses "
       (a
        :href "http://gulpjs.com/",
        :target "_blank"
        "Gulp")
       " for compiling CSS. You can customize your version of Spectre.css by editing LESS files in "
       (code "/src")
       " directory or removing unneeded components from "
       (code "spectre.less")
       ".")
      (p "Then, you can build the CSS file from the command line:")
      (ol
        (li
          "Navigate to the root directory of Spectre where you can find "
          (code "package.json")
          " file.")
        (li
          "Run "
          (code "npm install")
          ". NPM will install all dev dependencies as listed in package.json.")
        (li
          "When completed, run "
          (code "gulp build")
          " to compile LESS to CSS and minify files.")
        (li
          "You can find compiled CSS files in "
          (code "/dist")
          " directory."))
      (p
       "You can watch file changes and rebuild CSS files by using "
       (code "gulp watch")
       "."))))

(defn header-tab
  [label active]
  (li :class (str "tab-item" (when (= label active) " active"))
    (a :href (str "#" label)
      label)))

(defn generic-header
  [active body]
  (section
    :id active
    :class "container grid-960"
    (section :class "notes text-center"
      (ul :class "tab inline-flex"
        (header-tab "elements" active)
        (header-tab "layout" active)
        (header-tab "components" active)
        (header-tab "utilities" active)))
    body))

(def elements-header
  (generic-header
    "elements"
    (section :class "notes text-center"
      (s/button-group
        (s/a-button-primary :href "#typography"
          "typography")
        (s/a-button-primary :href "#tables"
          "tables")
        (s/a-button-primary :href "#buttons"
          "buttons")
        (s/a-button-primary :href "#forms"
          "forms")
        (s/a-button-primary :href "#labels"
          "labels")
        (s/a-button-primary :href "#media"
          "media")))))

(def typography-section
  (section
    :id "typography"
    :class "container grid-960"
    (s/header (h4 "typography"))
    (section :class "notes"
      (p
       (strong "Typography")
       " sets default styles for headings, paragraphs, semantic text, blockquote, lists and code elements."))
    (s/header (h5 "headings"))
    (h1 "H1 Title " (s/label "5rem"))
    (h2 "H2 Title " (s/label "4rem"))
    (h3 "H3 Title " (s/label "3rem"))
    (h4 "H4 Title " (s/label "2.4rem"))
    (h5 "H5 Title " (s/label "2rem"))
    (h6 "H6 Title " (s/label "1.6rem"))
    (hl/highlight :class "clojure"
      ;;{{
      (h1 "H1 Title " (s/label "5rem"))
      (h2 "H2 Title " (s/label "4rem"))
      (h3 "H3 Title " (s/label "3rem"))
      (h4 "H4 Title " (s/label "2.4rem"))
      (h5 "H5 Title " (s/label "2rem"))
      (h6 "H6 Title " (s/label "1.6rem"))
      ;;}}
      )
    (s/header (h5 "paragraphs"))
    (p
     "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent risus leo, "
     (a :href "#typography"
       "dictum in vehicula sit amet")
     ", feugiat tempus tellus. Duis quis sodales risus. Etiam euismod ornare consequat.")
    (p
     "Climb leg rub face on everything give attitude nap all day for under the bed. Chase mice attack feet but rub face on everything hopped up on goofballs.")
    (hl/highlight :class "clojure"
      ;;{{
      (p
       "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent risus leo, "
       (a :href "#typography"
         "dictum in vehicula sit amet")
       ", feugiat tempus tellus. Duis quis sodales risus. Etiam euismod ornare consequat.")
      (p
       "Climb leg rub face on everything give attitude nap all day for under the bed. Chase mice attack feet but rub face on everything hopped up on goofballs.")
      ;;}}
      )
    (s/header (h5 "semantic text elements"))
    (s/columns
      (div
        :column 3
        :column-xs 12
        (abbr
          :title "Internationalization"
          "I18N")
        (code :class "ml-10"
          "(abbr)"))
      (div
        :column 3
        :column-xs 12
        (strong
          "Bold")
        (code :class "ml-10"
          "(strong)")
        (code :class "ml-10"
          "(b)"))
      (div
        :column 3
        :column-xs 12
        (cite
          "Citation")
        (code :class "ml-10"
          "(cite)"))
      (div
        :column 3
        :column-xs 12
        (code
          "Hello World!")
        (code :class "ml-10"
          "(code)"))
      (div
        :column 3
        :column-xs 12
        (del
          "Deleted")
        (code :class "ml-10"
          "(del)"))
      (div
        :column 3
        :column-xs 12
        (em
          "Emphasis")
        (code :class "ml-10"
          "(em)"))
      (div
        :column 3
        :column-xs 12
        (i
         "Italic")
        (code :class "ml-10"
          "(i)"))
      (div
        :column 3
        :column-xs 12
        (ins
          "Inserted")
        (code :class "ml-10"
          "(ins)"))
      (div
        :column 3
        :column-xs 12
        (kbd
          "Ctrl + S")
        (code :class "ml-10"
          "(kbd)"))
      (div
        :column 3
        :column-xs 12
        (mark
          "Highlighted")
        (code :class "ml-10"
          "(mark)"))
      (div
        :column 3
        :column-xs 12
        (ruby
          "漢" (rt "kan")
          "字" (rt "ji"))
        (code :class "ml-10"
          "(ruby)"))
      (div
        :column 3
        :column-xs 12
        (s
         "Strikethrough")
        (code :class "ml-10"
          "(s)"))
      (div
        :column 3
        :column-xs 12
        (samp
          "Sample")
        (code :class "ml-10"
          "(samp)"))
      (div
        :column 3
        :column-xs 12
        "Text "
        (sub
          "Subscripted")
        (code :class "ml-10"
          "(sub)"))
      (div
        :column 3
        :column-xs 12
        "Text "
        (sub
          "Superscripted")
        (code :class "ml-10"
          "(sup)"))
      (div
        :column 3
        :column-xs 12
        (html-time
          "20:00")
        (code :class "ml-10"
          "(time)"))
      (div
        :column 3
        :column-xs 12
        (u
         "Underline")
        (code :class "ml-10"
          "(u)"))
      (div
        :column 3
        :column-xs 12
        (html-var "x") " = " (html-var "y") " + 2"
        (code :class "ml-10"
          "(var)")))

    (s/header (h5 "optimized for asian fonts"))
    (p :class "text-large text-center"
      (span :lang "zh-Hans" "好")
      ", "
      (span :lang "ja" "こんにちは")
      ", "
      (span :lang "ko" "안녕하세요"))
    (h6 "Chinese (Simplified)")
    (p :lang "zh-Hans"
      "革命不是请客吃饭，不是做文章，不是绘画绣花，不能那样雅致，那样从容不迫，“文质彬彬”，那样“温良恭俭让”。革命就是暴动，是一个阶级推翻一个阶级的暴烈的行动。")
    (h6 "Chinese (Traditional)")
    (p :lang "zh-Hant"
      "山不在高，有仙則名；水不在深，有龍則靈。斯是陋室，惟吾德馨。苔痕上階綠，草色入簾青；談笑有鴻儒，往來無白丁。可以調素琴，閱金經。無絲竹之亂耳，無案牘之勞形。南陽諸葛廬，西蜀子雲亭。孔子云：「何陋之有？」")
    (h6 "Japanese")
    (p :lang "ja"
      (u "祇園")
      (u "精舎")
      "の鐘の声、諸行無常の響きあり。沙羅双樹の花の色、盛者必衰の理をあらはす。おごれる人も久しからず。ただ春の夜の夢のごとし。たけき者も遂にはほろびぬ、ひとへ‌​に風の前の塵に同じ。")
    (h6 "Korean")
    (p :lang "ko"
      "나라말이 중국과 달라, 한문・한자와 서로 통하지 아니하므로, 어리석은 백성들이 말하고자 하는 바가 있어도, 끝내 제 뜻을 펴지 못하는 사람이 많다. 내가 이를 불쌍히 여겨, 새로 스물 여덟 글자를 만드니, 사람마다 하여금 쉽게 익혀, 날마다 씀에 편하게 하고자 할 따름이다.")
    (s/header (h5 "blockquote"))
    (blockquote
      (p
       "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.")
      (cite "- Source"))
    (hl/highlight :class "clojure"
      ;;{{
      (blockquote
        (p
         "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.")
        (cite "- Source"))
      ;;}}
      )
    (s/header (h5 "lists"))
    (s/columns
      (div :column 4
        (s/ul
          (li "list item 1")
          (li "list item 2"
            (ul
              (li "list item 2.1")
              (li "list item 2.2")
              (li "list item 2.3")))
          (li "list item 3")))
      (div :column 4
        (s/ol
          (li "list item 1")
          (li "list item 2"
            (ol
              (li "list item 2.1")
              (li "list item 2.2")
              (li "list item 2.3")))
          (li "list item 3")))
      (div :column 4
        (s/dl
          (dt "description list term 1")
          (dd "description list description 1")
          (dt "description list term 2")
          (dd "description list description 2")
          (dt "description list term 3")
          (dd "description list description 3"))))
    (hl/highlight :class "clojure"
      ;;{{
      (s/ul
        (li "list item 1")
        (li "list item 2"
          (ul
            (li "list item 2.1")
            (li "list item 2.2")
            (li "list item 2.3")))
        (li "list item 3"))

      (s/ol
        (li "list item 1")
        (li "list item 2"
          (ol
            (li "list item 2.1")
            (li "list item 2.2")
            (li "list item 2.3")))
        (li "list item 3"))

      (s/dl
        (dt "description list term 1")
        (dd "description list description 1")
        (dt "description list term 2")
        (dd "description list description 2")
        (dt "description list term 3")
        (dd "description list description 3"))
      ;;}}
      )))

(def tables-section
  (section
    :id "tables"
    :class "container grid-960"
    (s/header (h4 "tables"))
    (section :class "notes"
      (p
       (strong "Tables")
       " include default styles for tables and data sets."))
    (s/table :options #{:striped :hover}
      (thead
        (tr
          (th "name")
          (th "duration")
          (th "genre")
          (th "release date")))
      (tbody
        (tr
          (td "The Shawshank Redemption")
          (td "2h 22min")
          (td "Crime, Drama")
          (td "14 October 1994 "
            (s/label "USA")))
        (tr
          (td "The Godfather")
          (td "2h 55min")
          (td "Crime, Drama")
          (td "24 March 1972 "
            (s/label "USA")))
        (tr
          (td "Schindler's List")
          (td "3h 15min")
          (td "Biography, Drama, History")
          (td "4 February 1994 "
            (s/label "USA")))
        (tr
          (td "Se7en")
          (td "2h 7min")
          (td "Crime, Drama, Mystery")
          (td "24 March 1972 "
            (s/label "USA")))))
    (section :class "notes"
      (p
       "Use the element "
       (code "(s/table)")
       " to add padding, border and emphasized table header. Use "
       (code ":options #{:striped}")
       " to (s/table) to add zebra striped style. For hoverable table rows, you can add "
       (code ":options #{:hover}")
       " to enable hover style.")
      (p
       "Use the class "
       (code "selected")
       " to make (tr) element highlighted. "))
    (hl/highlight :class "clojure"
      ;;{{
      (s/table :options #{:striped :hover}
        (thead
          (tr
            (th "name")
            (th "duration")
            (th "genre")
            (th "release date")))
        (tbody
          (tr
            (td "The Shawshank Redemption")
            (td "2h 22min")
            (td "Crime, Drama")
            (td "14 October 1994 "
              (s/label "USA")))
          (tr
            (td "The Godfather")
            (td "2h 55min")
            (td "Crime, Drama")
            (td "24 March 1972 "
              (s/label "USA")))
          (tr
            (td "Schindler's List")
            (td "3h 15min")
            (td "Biography, Drama, History")
            (td "4 February 1994 "
              (s/label "USA")))
          (tr
            (td "Se7en")
            (td "2h 7min")
            (td "Crime, Drama, Mystery")
            (td "24 March 1972 "
              (s/label "USA")))))
      ;;}}
      )))

(def buttons-section
  (section
    :id "buttons"
    :class "container grid-960"
    (s/header (h4 "buttons"))
    (section :class "notes"
      (p
       (strong "Buttons")
       " include simple button styles for actions in different types and sizes. "))
    (s/columns
      (div
        :column true
        :column-xs 12
        (s/button "default button")
        (s/button :options #{:loading}
          "default button"))
      (div
        :column true
        :column-xs 12
        (s/button-primary "primary button")
        (s/button-primary :options #{:loading}
          "primary button"))
      (div
        :column true
        :column-xs 12
        (s/button-link "link button")
        (s/button-link :options #{:loading}
          "link button")))
    (section :class "notes"
      (p
       "Use the element "
       (code "(s/button)")
       " for a default button. There are elements "
       (code "(s/button-primary)")
       " and "
       (code "(s/button-link)")
       " for predefined primary and link buttons. A button with "
       (code ":options #{:loading}")
       " can show loading indicator.  "))
    (hl/highlight
      :class "clojure"
      ;;{{
      (s/button "default button")
      (s/button-primary "primary button")
      (s/button-link "link button")

      ;; buttons with loading state
      (s/button :options #{:loading}
        "default button")
      (s/button-primary :options #{:loading}
        "primary button")
      (s/button-link :options #{:loading}
        "link button")
      ;;}}
      )
    (section :class "notes"
      (p
        "Add the option " (code ":options #{:disabled}") " for a disabled button.")
     (s/columns
       (div
         :column true
         :column-xs 12
         (s/button
           :options #{:disabled}
           "default button"))
       (div
         :column true
         :column-xs 12
         (s/button-primary
           :options #{:disabled}
           "primary button"))
       (div
         :column true
         :column-xs 12
         (s/button-link
           :options #{:disabled}
           "link button"))))
    (s/header (h5 "button sizes"))
    (s/columns
      (div :column true
        (s/button :options #{:lg}
          "large button")
        (s/button "normal button")
        (s/button :options #{:sm}
          "small button"))
      (div :column true
        (s/button :options #{:block}
          "block button")))
    (section :class "notes"
      (p
       "Add "
       (code ":options #{:sm}")
       " or "
       (code ":options #{:lg}")
       " for small or large button size. Also, you can add "
       (code ":options #{:block}")
       " for a full-width button. "))
    (hl/highlight :class "clojure"
      ;;{{
      (s/button :options #{:lg}
        "large button")
      (s/button "normal button")
      (s/button :options #{:sm}
        "small button")

      (s/button :options #{:block}
        "block button")
      ;;}}
      )
    (s/columns
      (div :column true
        (s/button-primary :options #{:lg}
          (s/icon "icon-markunread")
          " large")
        (s/button-primary
          (s/icon "icon-markunread")
          " normal")
        (s/button-primary :options #{:sm}
          (s/icon "icon-markunread")
          " small")))
    (section :class "notes"
      (p
       "Icons with the class "
       (code "icon")
       " can be correctly rendered in each button size. "))
    (hl/highlight :class "clojure"
      ;;{{
      (s/button-primary :options #{:lg}
        (s/icon "icon-markunread")
        " large")
      (s/button-primary
        (s/icon "icon-markunread")
        " normal")
      (s/button-primary :options #{:sm}
        (s/icon "icon-markunread")
        " small")
      ;;}}
      )
    (s/header (h5 "button groups"))
    (s/columns
      (div
        :column true
        :column-xs 12
        (s/button-group
          (s/button "first button")
          (s/button "second button")
          (s/button "third button")))
      (div
        :column true
        :column-xs 12
        (s/button-group :options #{:block}
          (s/button-primary "first button")
          (s/button-primary "second button")
          (s/button-primary "third button"))))
    (s/columns
      (div
        :column true
        :column-xs 12
        (s/button-group
          (s/button :options #{:sm :active}
            "first button")
          (s/button :options #{:sm}
            "second button")
          (s/button :options #{:sm}
            "third button")))
      (div
        :column true
        :column-xs 12
        (s/button-group :options #{:block}
          (s/button-primary :options #{:sm :active}
            "first button")
          (s/button-primary :options #{:sm}
            "second button")
          (s/button-primary :options #{:sm}
            "third button"))))
    (section
      :class "notes"
      (p
       "If you want to use buttons as a group, use the element "
       (code "(s/button-group)")
       ". You can add use the "
       (code ":options #{:block}")
       " for a full-width button group."))
    (hl/highlight
      :class "clojure"
      ;;{{
      (s/button-group
        (s/button "first button")
        (s/button "second button")
        (s/button "third button"))

      (s/button-group :options #{:block}
        (s/button-primary "first button")
        (s/button-primary "second button")
        (s/button-primary "third button"))

      (s/button-group
        (s/button :options #{:sm}
          "first button")
        (s/button :options #{:sm}
          "second button")
        (s/button :options #{:sm}
          "third button"))
      ;;}}
      )))

(def form-section
  (section
    :id "forms"
    :class "container grid-960"
    (s/header (h4 "forms"))
    (section :class "notes"
      (p
       (strong "Forms")
       " provide the most common control styles used in forms, including label, input, textarea, select, checkbox, radio and switch."))
    (s/columns
      (div
        :column 6
        :column-xs 12
        (form
          :action "#forms"
          (s/form-group
            (s/form-label :for "input-example-1" "Name")
            (s/input :type "text" :id "input-example-1" :placeholder "Name"))
          (s/form-group
            (s/form-label :for "input-example-2" "Email")
            (s/input :type "email" :id "input-example-2" :placeholder "Email"))
          (s/form-group
            (s/form-label "Gender")
            (s/form-label :class "form-radio"
              (s/input :type "radio" :name "gender")
              (i :class "form-icon") "Male")
            (s/form-label :class "form-radio"
              (s/input :type "radio" :name "gender")
              (i :class "form-icon") "Female"))
          (s/form-group
            (s/select
              (option "Choose an option")
              (option "Slack")
              (option "Skype")
              (option "Hipchat")))
          (s/form-group
            (s/input-switch "Send me emails with news and tips"))
          (s/form-group
            (s/form-label :for "input-example-3" "Message")
            (s/textarea :id "input-example-3" :placeholder "Textarea" :rows "3"))
          (s/form-group
            (s/input-checkbox "Remember me"))
          (s/form-group
            (s/button-primary :type "submit" "Submit")
            (s/button-link :type "reset" "Cancel")))))
    (hl/highlight :class "clojure"
      ;;{{
      (form
        :action "#forms"
        ; form input control
        (s/form-group
          (s/form-label :for "input-example-1" "Name")
          (s/input :type "text" :id "input-example-1" :placeholder "Name"))
        ; form radio control
        (s/form-group
          (s/form-label "Gender")
          (s/input-radio
            :name "gender"
            "Male")
          (s/input-radio
            :name "gender"
            "Female"))
        ; form select control
        (s/form-group
          (s/select
            (option "Choose an option")
            (option "Slack")
            (option "Skype")
            (option "Hipchat")))
        ; form switch control
        (s/form-group
          (s/input-switch "Send me emails with news and tips"))
        ; form textarea control
        (s/form-group
          (s/form-label :for "input-example-3" "Message")
          (s/textarea :id "input-example-3" :placeholder "Textarea" :rows "3"))
        ; form checkbox control
        (s/form-group
          (s/input-checkbox "Remember me")))
      ;;}}
      )
    (section :class "notes"
      (p
       "If you want to have a horizontal form, add the class "
       (code "form-horizontal")
       " to the "
       (code "(form)")
       " function. And add the class "
       (code "col-[xs|sm|md|lg|xl]-[1-12]")
       " to the child elements for form row layout."))
    (s/columns
      (div
        :column 6
        :column-xs 12
        (form
          :class "form-horizontal"
          :action "#forms"
          (s/form-group
            (div :col 3
              (s/form-label :for "input-example-1" "Name"))
            (div :col 9
              (s/input :type "text" :id "input-example-1" :placeholder "Name")))
          (s/form-group
            (div :col 3
              (s/form-label :for "input-example-2" "Email"))
            (div :col 9
              (s/input :type "email" :id "input-example-2" :placeholder "Email")))
          (s/form-group
            (div :col 3
              (s/form-label "Gender"))
            (div :col 9
              (s/input-radio
                :name "gender"
                "Male")
              (s/input-radio
                :name "gender"
                :checked true
                "Female")))
          (s/form-group
            (div :col 3)
            (div :col 9
              (s/select
                :multiple true
                (option "Choose an option")
                (option "Slack")
                (option "Skype")
                (option "Hipchat"))))
          (s/form-group
            (div :col 3)
            (div :col 9
              (s/input-switch "Send me emails with news and tips")))
          (s/form-group
            (div :col 3
              (s/form-label :for "input-example-3" "Message"))
            (div :col 9
              (s/textarea :id "input-example-3" :placeholder "Textarea" :rows "3")))
          (s/form-group
            (div :col 3)
            (div :col 9
              (s/input-checkbox "Remember me")))
          (s/form-group
            (div :col 3)
            (div :col 9
              (s/button-primary :type "submit" "Submit")
              (s/button-link :type "reset" "Cancel"))))))
    (hl/highlight :class "clojure"
      ;;{{
      (form
        :class "form-horizontal"
        (s/form-group
          (div :col 3
            (s/form-label "Name"))
          (s/input
            :col 9
            :type "text"
            :placeholder "Name"))
        ;; Form structure
        )
      ;;}}
      )
    (s/columns
      (div
        :column 6
        :column-xs 12
        (form
          :class "form-horizontal"
          (s/form-group
            (div :col 3
              (s/form-label :for "input-example-8" "Email"))
            (div :col 9
              (s/input :type "email" :id "input-example-8" :placeholder "Email" :value "spectre@example.com")))
          (s/form-group
            (div :col 3
              (s/form-label :for "input-example-9" "URL"))
            (div :col 9
              (s/input :type "url" :id "input-example-9" :placeholder "URL" :value "https://github.com/picturepan2/spectre")))
          (s/form-group
            (div :col 3
              (s/form-label :for "input-example-10" "Search"))
            (div :col 9
              (s/input :type "search" :id "input-example-10" :placeholder "Search" :value "")))
          (s/form-group
            (div :col 3
              (s/form-label :for "input-example-11" "Tel"))
            (div :col 9
              (s/input :type "tel" :id "input-example-11" :placeholder "Tel" :value "1-(888)-888-8888")))
          (s/form-group
            (div :col 3
              (s/form-label :for "input-example-12" "Password"))
            (div :col 9
              (s/input :type "password" :id "input-example-12" :placeholder "Password" :value "123456789")))
          (s/form-group
            (div :col 3
              (s/form-label :for "input-example-13" "Number"))
            (div :col 9
              (s/input :type "number" :id "input-example-13" :placeholder "Number" :value "66")))
          (s/form-group
            (div :col 3
              (s/form-label :for "input-example-14" "Date"))
            (div :col 9
              (s/input :type "date" :id "input-example-14" :placeholder "Date" :value "2016-12-31")))
          (s/form-group
            (div :col 3
              (s/form-label :for "input-example-15" "Color"))
            (div :col 9
              (s/input :type "color" :id "input-example-15" :placeholder "Color" :value "#5764c6")))
          (s/form-group
            (div :col 3
              (s/form-label :for "input-example-16" "File"))
            (div :col 9
              (s/input :type "file" :id "input-example-16" :placeholder "File" :value ""))))))
    (section :class "notes"
      (p
       "To use form validation styles, add "
       (code ":options #{:success}")
       " and "
       (code ":options #{:error}")
       " to the inputs or their  "
       (code "(s/form-group)")
       ". You can use the element "
       (code "(s/input-hint)")
       " to provide form validation success and error messages."))
    (s/columns
      (div
        :column 6
        :column-xs 12
      (s/form-group
        :options #{:error}
        (s/form-label "Name")
        (s/input
          :type "text"
          :placeholder "Name")
        (s/input-hint "The name is invalid"))
      (s/form-group
        (s/form-label "Email")
        (s/input
          :options #{:success}
          :type "text"
          :placeholder "Email")
        (s/input-hint "The email is available"))))
    (s/columns
      (div
        :column 6
        :column-xs 12
      (s/form-group
        (s/select
          :options #{:error}
          (option "Choose an option")
          (option "Slack")
          (option "Skype")
          (option "Hipchat"))
        (s/input-hint "The option is invalid"))
      (s/form-group
        (s/select
          :options #{:success}
          (option "Choose an option")
          (option "Slack")
          (option "Skype")
          (option "Hipchat"))
        (s/input-hint "The option is valid"))))
    (hl/highlight :class "clojure"
      ;;{{
      (form
        ;; on form-group
        (s/form-group :options #{:success}
          (s/form-label "Name")
          (s/input
            :type "text"
            :placeholder "Name")
          (s/input-hint "The name is valid"))

        ;; on input
        (s/form-group
          (s/form-label "Email")
          (s/input
            :options #{:success}
            :type "text"
            :placeholder "Email")
          (s/input-hint "The email is available")))
      ;;}}
      )
    (section :class "notes"
      (p
       "For smaller or larger input and select controls, you could add "
       (code ":options #{:sm}")
       " or "
       (code ":options #{:lg}")
       " to the elements."))
    (s/columns
      (div :column 4
        (s/input
          :options #{:sm}
          :type "text"
          :placeholder "Name"))
      (div :column 4
        (s/select :options #{:sm}
          (option "Choose an option")
          (option "Slack")
          (option "Skype")
          (option "Hipchat"))))
    (s/columns
      (div :column 4
        (s/input
          :options #{:lg}
          :type "text"
          :placeholder "Name"))
      (div :column 4
        (s/select :options #{:lg}
          (option "Choose an option")
          (option "Slack")
          (option "Skype")
          (option "Hipchat"))))
    (s/header (h5 "input groups"))
    (s/columns
      (div :column-xs 12
        (s/input-group
          (s/input-group-text
            :options #{:sm}
            "slack.com/")
          (s/input
            :options #{:sm}
            :type "text"
            :placeholder "site name")))
      (div :column-xs 12
        (s/input-group
          (s/input
            :options #{:sm}
            :type "text"
            :placeholder "username")
          (s/input-group-text
            :options #{:sm}
            "@slack.com")))
      (div :column-xs 12
        (s/input-group
          (s/input-group-text
            :options #{:sm}
            "slack.com/")
          (s/input
            :options #{:sm}
            :type "text"
            :placeholder "site name")
          (s/button-primary
            :options #{:input-group :sm}
            "Submit"))))
    (s/columns
      (div :column-xs 12
        (s/input-group
          (s/input-group-text
            "slack.com/")
          (s/input
            :type "text"
            :placeholder "site name")))
      (div :column-xs 12
        (s/input-group
          (s/input
            :type "text"
            :placeholder "username")
          (s/input-group-text
            "@slack.com")))
      (div :column-xs 12
        (s/input-group
          (s/input-group-text
            "slack.com/")
          (s/input
            :type "text"
            :placeholder "site name")
          (s/button-primary
            :options #{:input-group}
            "Submit"))))
    (s/columns
      (div :column-xs 12
        (s/input-group
          (s/input-group-text
            :options #{:lg}
            "slack.com/")
          (s/input
            :options #{:lg}
            :type "text"
            :placeholder "site name")))
      (div :column-xs 12
        (s/input-group
          (s/input
            :options #{:lg}
            :type "text"
            :placeholder "username")
          (s/input-group-text
            :options #{:lg}
            "@slack.com")))
      (div :column-xs 12
        (s/input-group
          (s/input-group-text
            :options #{:lg}
            "slack.com/")
          (s/input
            :options #{:lg}
            :type "text"
            :placeholder "site name")
          (s/button-primary
            :options #{:input-group :lg}
            "Submit"))))
    (section :class "notes"
      (p
       "If you want to attach text and button along with an input, use the element "
       (code "(s/input-group)")
       ". And use the element "
       (code "(s/input-group-text)")
       " for text and add "
       (code ":options #{:input-group}")
       " to the button element. Buttons, inputs and text can be made large or small using "
       (code ":options #{:lg}")
       " or "
       (code ":options #{:sm}")
       "."))
    (hl/highlight :class "clojure"
      ;;{{
      ;; normal input group
      (s/input-group
        (s/input-group-text "slack.com/")
        (s/input
          :type "text"
          :placeholder "site name"))

      ;; large input group
      (s/input-group
        (s/input
          :options #{:lg}
          :type "text"
          :placeholder "username")
        (s/input-group-text :options #{:lg}
          "@slack.com"))

      ;; normal input group with button
      (s/input-group
        (s/input-group-text "slack.com/")
        (s/input
          :type "text"
          :placeholder "site name")
        (s/button-primary :options #{:input-group}
          "Submit"))
      ;;}}
      )))

(def labels-section
  (section
    :id "labels"
    :class "container grid-960"
    (s/header (h4 "labels"))
    (section :class "notes"
      (p
       (strong "Labels")
       " are formatted text tags for highlighted, informative information."))
    (s/columns
      (div :column true
        (s/label "default label")
        (s/label-primary "primary label")
        (s/label-success "success label")
        (s/label-danger "danger label")))
    (section :class "notes"
      (p
       "Use the element "
       (code "(s/label)")
       ". You can use the elements "
       (code "(s/label-primary)") ", "
       (code "(s/label-success)") " and "
       (code "(s/label-danger)")
       " for a colored label."))
    (hl/highlight :class "clojure"
      ;;{{
      (s/label "default label")
      (s/label-primary "primary label")
      (s/label-success "success label")
      (s/label-danger "danger label")
      ;;}}
      )))

(def media-section
  (section
    :id "media"
    :class "container grid-960"
    (s/header (h4 "media"))
    (section :class "notes"
      (p
       (strong "Media")
       " include responsive image, figures and video classes.")
      (p
        "Use the element "
        (code "(s/img)") "."
        " The images will scale with the parent sizes."))
    (s/columns
      (div
        :column 6
        :column-xs 12
        (s/img
          :options #{:rounded}
          :src "images/osx-el-capitan.jpg")))
    (section :class "notes"
      (p
       "You can use the element "
       (code "(s/figure)")
       " for an image with a caption. The images created with the "
        (code "(s/img)") " element will be reponsive. Use the "
        (code "(s/figcaption)") " for caption. Also you can use "
        (code ":options #{:left}") ", "
        (code ":options #{:center}") " and "
        (code ":options #{:right}") "for caption aligment."))
    (s/columns
      (div
        :column 6
        :column-xs 12
        (s/figure
          (s/img
            :options #{:rounded}
            :src "images/osx-yosemite-2.jpg")
          (s/figcaption
            :options #{:center}
            "macOS Yosemite wallpaper"))))
    (section :class "notes"
      (p
       "For responsive video, add a container with the class "
       (code "video-responsive")
       ". Insert any YouTube, Youku or other iframe/embed video inside the container. The ratio is 16:9 by default. You may add "
       (code "video-responsive-4-3")
       " for 4:3 ratio video container or"
       (code "video-responsive-1-1")
       " for 1:1 ratio."))
    (s/columns
      (div
        :column 6
        :column-xs 12
        (div :class "video-responsive"
          (iframe
            :frameborder "0",
            :src "https://www.youtube.com/embed/BzMLA8YIgG0",
            :width "560",
            :height "315",
            :allowfullscreen ""))))
    (hl/highlight :class "clojure"
      ;;{{
      (s/img
        :options #{:rounded}
        :src "images/osx-el-capitan.jpg")

      (s/figure
        (s/img
          :options #{:rounded}
          :src "images/osx-yosemite-2.jpg")
        (s/figcaption
          :options #{:center}
          "macOS Yosemite wallpaper"))

      (div :class "video-responsive"
        (iframe
          :frameborder "0",
          :src "https://www.youtube.com/embed/BzMLA8YIgG0",
          :width "560",
          :height "315",
          :allowfullscreen ""))
      ;;}}
      )))

(def layout-header
  (generic-header
    "layout"
    (section :class "notes text-center"
      (s/button-group
        (s/a-button-primary :href "#grid"
          "flexbox grid")
        (s/a-button-primary :href "#responsive"
          "responsive")
        (s/a-button-primary :href "#navbar"
          "navbar")
        (s/a-button-primary :href "#empty"
          "empty states")))))

(def grid-section
  (section
    :id "grid"
    :class "container grid-960"
    (s/header (h4 "flexbox grid"))
    (section :class "notes"
      (p
       (strong "Layout")
       " includes flexbox based responsive grid system with 12 columns. "))
    (s/columns
      (div :column true
        (div :class "bg-grey"))
      (div :column true
        (div :class "bg-grey"))
      (div :column true
        (div :class "bg-grey"))
      (div :column true
        (div :class "bg-grey"))
      (div :column true
        (div :class "bg-grey"))
      (div :column true
        (div :class "bg-grey"))
      (div :column true
        (div :class "bg-grey"))
      (div :column true
        (div :class "bg-grey"))
      (div :column true
        (div :class "bg-grey"))
      (div :column true
        (div :class "bg-grey"))
      (div :column true
        (div :class "bg-grey"))
      (div :column true
        (div :class "bg-grey")))
    (s/columns
      (div :column 12
        (div :class "bg-grey"
          ":column 12 (100%)")))
    (s/columns
      (div :column 9
        (div :class "bg-grey"
          ":column 9 (75%)")))
    (s/columns
      (div :column 6
        (div :class "bg-grey"
          ":column 6 (50%)")))
    (s/columns
      (div :column 3
        (div :class "bg-grey"
          ":column 3 (25%)")))
    (section :class "notes"
      (p
       "Use the element "
       (code "(s/columns)")
       " inside a container with the class "
       (code "container")
       ". And add any element you want with the attribute "
       (code ":column")
       " inside the container. These columns will take up the space equally. You can specific the width of each column by adding the number of columns "
       (code ":column [1-12]")
       ".")
      (p
       "And you can add "
       (code ":options #{:gapless}")
       " to have gapless columns."))
    (s/columns :options #{:gapless}
      (div :column 6
        (div :class "bg-grey"
          ":column 6 (gapless)"))
      (div :column 6
        (div :class "bg-grey"
          ":column 6 (gapless)")))
    (section :class "notes"
      (p
       "By default, Spectre grid has multi-line flexbox enabled. You can add the option "
       (code ":options #{:online}") " to "
       (code "(s/columns)")
       " to make all its child columns positioned in the same single row."))
    (s/columns :options #{:oneline}
      (div :column 8
        (div :class "bg-grey"
          ":column 8"))
      (div :column 8
        (div :class "bg-grey"
          ":column 8")))
    (hl/highlight :class "clojure"
      ;;{{
      (div :class "container"
        (s/columns
          (div :column 6 ":column 6")
          (div :column 3 ":column 3")
          (div :column 2 ":column 2")
          (div :column 1 ":column 1"))

        (s/columns :options #{:gapless}
          (div :column 6 ":column 6")
          (div :column 6 ":column 6"))

        (s/columns :options #{:oneline}
          (div :column 8 ":column 8")
          (div :column 8 ":column 8")))
      ;;}}
      )))

(def responsive-section
  (section
    :id "responsive"
    :class "container grid-960"
    (s/header (h4 "responsive grid"))
    (s/columns
      (div :column-md 6
        (div :class "bg-grey"
          ":column-md 6"))
      (div :column-md 3
        (div :class "bg-grey"
          ":column-md 3"))
      (div :column-md 3
        (div :class "bg-grey"
          ":column-md 3")))
    (s/columns
      (div :column-sm 6
        (div :class "bg-grey"
          ":column-sm 6"))
      (div :column-sm 3
        (div :class "bg-grey"
          ":column-sm 3"))
      (div :column-sm 3
        (div :class "bg-grey"
          ":column-sm 3")))
    (s/columns
      (div :column-xs 6
        (div :class "bg-grey"
          ":column-xs 6"))
      (div :column-xs 3
        (div :class "bg-grey"
          ":column-xs 3"))
      (div :column-xs 3
        (div :class "bg-grey"
          ":column-xs 3")))
    (section :class "notes"
      (p
       "Hoplon Spectre provides a neat responsive layout grid system. There are "
       (code ":column-xs [1-12]")
       ", "
       (code ":column-sm [1-12]")
       " and "
       (code ":column-md [1-12]")
       " available for flexible grid across mobile, tablet and desktop viewport usage.")
      (ul
        (li
          "For window width less than "
          (strong "480px")
          ", all columns will show as a single row.")
        (li
          (code ":column-xs [1-12]")
          " apply to window width greater than or equal to "
          (strong "480px")
          ". ")
        (li
          (code ":column-sm [1-12]")
          " apply to window width greater than or equal to "
          (strong "600px")
          ". ")
        (li
          (code ":column-md [1-12]")
          " apply to window width greater than or equal to "
          (strong "840px")
          ". ")
        (li
          (code ":column-lg [1-12]")
          " apply to window width greater than or equal to "
          (strong "960px")
          ". ")
        (li
          (code ":column-xl [1-12]")
          " apply to window width greater than or equal to "
          (strong "1280px")
          ". ")))
    (hl/highlight :class "clojure"
      ;;{{
      (div :class "container"
        (s/columns
          (div :column-xs 6 ":column-xs 6")
          (div :column-xs 3 ":column-xs 3")
          (div :column-xs 3 ":column-xs 3")))
      ;;}}
      )
    (section :class "notes"
      (p
       "For hiding elements on specific viewport sizes, there are the hide attribute "
       (code ":hide #{:xs}")
       ", "
       (code ":hide #{:sm}")
       ", "
       (code ":hide #{:md}")
       ", "
       (code ":hide #{:lg}")
       " and "
       (code ":hide #{:xl}")
       " available.")
      (ul
        (li
          (code ":hide #{:xs}")
          " hides elements when the viewport is smaller than or equal to "
          (strong "480px")
          ". ")
        (li
          (code ":hide #{:sm}")
          " hides elements when the viewport is smaller than or equal to "
          (strong "600px")
          ". ")
        (li
          (code ":hide #{:md}")
          " hides elements when the viewport is smaller than or equal to "
          (strong "840px")
          ". ")
        (li
          (code ":hide #{:lg}")
          " hides elements when the viewport is smaller than or equal to "
          (strong "960px")
          ". ")
        (li
          (code ":hide #{:xl}")
          " hides elements when the viewport is smaller than or equal to "
          (strong "1280px")
          ". ")))))

(def navbar-section
  (section
    :id "navbar"
    :class "container grid-960"
    (s/header (h4 "navbar"))
    (section :class "notes"
      (p
       (strong "Navbar")
       " is a layout container that appear in the header of apps and websites. "))
    (s/columns
      (div :column true
        (s/navbar
          (s/navbar-section
            (a
              :class "navbar-brand"
              :href "#navbar"
              (i :class "icon icon-pages")
              " Spectre.css")
            (s/a-button-link :href "#navbar"
              "features")
            (s/a-button-link :href "#navbar"
              "documents"))
          (s/navbar-section
            (s/input-group
              (s/input
                :options #{:inline}
                :type "text"
                :placeholder "search")
              (s/a-button-primary
                :options #{:input-group}
                :href "#navbar"
                "Search"))))))
    (section :class "notes"
      (p
       "A navbar component can include logo brand, nav links and buttons, search box or any combination of those elements. Each section created with the element "
       (code "navbar-section")
       " will be evenly distributed in the container."))
    (hl/highlight :class "clojure"
      ;;{{
      (s/navbar
        (s/navbar-section
          (a :class "navbar-brand" :href "#navbar"
            (i :class "icon icon-pages") " Spectre.css")
          (s/a-button-link :href "#navbar" "features")
          (s/a-button-link :href "#navbar" "documents"))
        (s/navbar-section
          (s/input-group
            (s/input :options #{:inline} :type "text" :placeholder "search")
            (s/button-primary :options #{:input-group} "Search"))))
      ;;}}
      )))

(def empty-section
  (section
    :id "empty"
    :class "container grid-960"
    (s/header (h4 "empty states/blank slates"))
    (section :class "notes"
      (p
       (strong "Empty states/blank slates")
       " are commonly used as placeholders for first time use, empty data and error screens."))
    (s/columns
      (div :column 6
        (section :class "empty"
          (i :class "icon icon-markunread")
          (p :class "empty-title"
            "You have no new messages")
          (p :class "empty-meta"
           "Click the button to start a conversation.")
          (s/button-primary :class "empty-action"
            "Send a message")))
      (div :column 6
        (section :class "empty"
          (i :class "icon icon-people")
          (p :class "empty-title"
            "You are not following anyone")
          (s/input-group :class "empty-action"
            (s/input
              :type "text"
              :placeholder "")
            (s/button-primary :options #{:input-group}
              "Search")))))
    (section :class "notes"
      (p
       "An empty state component can include icons, messages(title and meta messages) and action buttons or any combination of those elements. Add "
       (code "empty-title")
       ", "
       (code "empty-meta")
       " or "
       (code "empty-action")
       " to the elements. HTML structure is exampled below. "))
    (hl/highlight :class "clojure"
      ;;{{
      (section :class "empty"
        (i :class "icon icon-markunread")
        (p :class "empty-title"
          "You have no new messages")
        (p :class "empty-meta"
          "Click the button to start a conversation.")
        (s/button-primary :class "empty-action"
          "Send a message"))
      ;;}}
      )))

(def components-header
  (generic-header
    "components"
    (section :class "notes text-center"
      (s/button-group
        (s/a-button-primary :href "#avatars"
          "avatars")
        (s/a-button-primary :href "#chips"
          "chips")
        (s/a-button-primary :href "#autocomplete"
          "autocomplete")
        (s/a-button-primary :href "#tooltips"
          "tooltips")
        (s/a-button-primary :href "#badges"
          "badges")
        (s/a-button-primary :href "#toasts"
          "toasts")
        (s/a-button-primary :href "#menus"
          "menus")
        (s/a-button-primary :href "#dropdowns"
          "dropdowns")
        (s/a-button-primary :href "#navigation"
          "navigation")
        (s/a-button-primary :href "#modals"
          "modals")
        (s/a-button-primary :href "#cards"
          "cards")))))

(def avatar-section
  (section
    :id "avatars"
    :class "container grid-960"
    (s/header (h4 "avatars"))
    (section :class "notes"
      (p (strong "Avatars") " are user profile pictures. "))
    (s/columns
      (div
        :column 4
        :column-xs 12
        (s/avatar :options #{:xl}
          (img :src "images/avatar-1.png"))
        (s/avatar :options #{:lg}
          (img :src "images/avatar-2.png"))
        (s/avatar
          (img :src "images/avatar-3.png"))
        (s/avatar :options #{:sm}
          (img :src "images/avatar-4.png"))
        (s/avatar :options #{:xs}
          (img :src "images/avatar-5.png")))
      (div
        :column 4
        :column-xs 12
        (s/avatar :options #{:xl}
          (img :src "images/avatar-1.png")
          (s/avatar-icon :src "images/avatar-2.png"))
        (s/avatar :options #{:lg}
          (img :src "images/avatar-2.png")
          (s/avatar-icon :src "images/avatar-3.png"))
        (s/avatar
          (img :src "images/avatar-3.png")
          (s/avatar-icon :src "images/avatar-4.png"))
        (s/avatar :options #{:sm}
          (img :src "images/avatar-4.png")
          (s/avatar-icon :src "images/avatar-5.png"))
        (s/avatar :options #{:xs}
          (img :src "images/avatar-5.png")
          (s/avatar-icon :src "images/avatar-1.png")))
      (div
        :column 4
        :column-xs 12
        (s/avatar
          :options #{:xl}
          :data-initial "YZ",
          :css {:background-color "#5764c6"})
        (s/avatar
          :options #{:lg}
          :data-initial "YZ",
          :css {:background-color "#5764c6"})
        (s/avatar
          :data-initial "YZ",
          :css {:background-color "#5764c6"})
        (s/avatar
          :options #{:sm}
          :data-initial "YZ",
          :css {:background-color "#5764c6"})
        (s/avatar
          :options #{:xs}
          :data-initial "YZ",
          :css {:background-color "#5764c6"})))
    (section :class "notes"
      (p
       "Use the element "
       (code "(s/avatar)")
       " or "
       (code "(s/avatar-img)")
       ". There are 4 additional sizes available, including "
       (code ":options #{:xl}")
       " (64px), "
       (code ":options #{:lg}")
       " (48px), "
       (code ":options #{:sm}")
       " (24px), and "
       (code ":options #{:xs}")
       " (16px). By default, the avatar size is 32px.")
      (p
       "For users who don't have profile pictures, you may use their initials for avatars. Use the element "
       (code "(s/avatar)")
       " with the attribute "
       (code ":data-initial \"XY\"")
       " where XY is the name that will appear inside the avatar."))
    (hl/highlight :class "clojure"
      ;;{{
      (s/avatar :options #{:xl}
        (img :src "images/avatar-1.png"))

      (s/avatar :options #{:xl}
        (img :src "images/avatar-1.png")
        (s/avatar-icon :src "images/avatar-5.png"))

      (s/avatar :options #{:xl} :data-initial "YZ" :css {:background-color "#5764c6"})

      ; Shows initals when avatar image is unavailable or not fully loaded
      (s/avatar :options #{:xl} :data-initial "YZ" :css {:background-color "#5764c6"}
        (img :src "images/avatar-1.png"))
      ;;}}
      )))

(def chips-section
  (section
    :id "chips"
    :class "container grid-960"
    (s/header (h4 "chips"))
    (section :class "notes"
      (p
       (strong "Chips")
       " are complex entities in small blocks. "))
    (s/columns
      (div
        :column-xs 12
        (s/chip
          (s/chip-text "Crime")
          (s/button-clear))
        (s/chip
          (s/icon "icon-favorite_border")
          (s/chip-text "Drama")
          (s/button-clear))
        (s/chip
          (s/chip-text "Biography")
          (s/button-clear))
        (s/chip
          (s/chip-text "Mystery")
          (s/button-clear)))
      (div
        :column-xs 12
        (s/chip
          (s/avatar :data-initial "TS" :css {:background-color "#5764c6"})
          (s/chip-text "Tony Stark")
          (s/button-clear))
        (s/chip
          (s/avatar-img :src "images/avatar-1.png")
          (s/chip-text "Thor Odinson")
          (s/button-clear))
        (s/chip
          (s/avatar-img :src "images/avatar-4.png")
          (s/chip-text "Steve Rogers")
          (s/button-clear))))
    (section :class "notes"
      (p
       "Add a container element "
       (code "(s/chip)")
       ". And add child text elements with "
       (code "(s/chip-text)")
       " or icons with  "
       (code "(s/icon)")
       "."))
    (hl/highlight :class "clojure"
      ;;{{
      (s/chip
        (s/chip-text "Crime")
        (s/button-clear))

      (s/chip
        (s/icon "icon-favorite_border")
        (s/chip-text "Drama")
        (s/button-clear))

      (s/chip
        (s/avatar-img :src "images/avatar-1.png")
        (s/chip-text "Yan Zhu")
        (s/button-clear))
      ;;}}
      )))

(def autocomplete-section
  (section
    :id "autocomplete"
    :class "container grid-960"
    (s/header (h4 "autocomplete"))
    (section :class "notes"
      (p
       (strong "Autocomplete")
       " form component provides suggestions while you type. It is often used for tags and contacts input."))
    (s/columns
      (div
        :column 6
        :column-xs 12
        (s/form-group
          (s/autocomplete
            (s/autocomplete-input
              (s/chip (s/avatar :data-initial "TS" :css {:background-color "#A2A8E1"}) (s/chip-text "Tony Stark") (s/button-clear))
              (s/avatar-chip-input "Thor Odinson" "images/avatar-1.png")
              (s/avatar-chip-input "Steve Rogers" "images/avatar-4.png")
              (s/chip (s/chip-text "Bruce Banner") (s/button-clear))
              (s/chip :options #{:selected} (s/chip-text "Natasha Romanoff") (s/button-clear))
              (s/input
                :type "text"
                :placeholder ""))))
        (s/form-group
          (s/autocomplete
            (s/autocomplete-input
              (s/chip-input "Tony Stark")
              (s/chip-input "Thor Odinson")
              (s/chip-input "Steve Rogers")
              (s/chip-input "Bruce Banner")
              (s/chip-input "Natasha Romanoff" #{:selected})
              (s/input
                :type "text"
                :placeholder "")))))
      (div
        :column 6
        :column-xs 12
        (s/form-group
          (s/autocomplete
            (s/autocomplete-input
              (s/chip (s/chip-text "Bruce Banner") (s/button-clear))
              (s/avatar-chip-input "Thor Odinson" "images/avatar-1.png")
              (s/input
                :value "S"
                :type "text"
                :placeholder "typing here"))
            (s/menu
              (s/autocomplete-item-avatar-chip "Steve Rogers" "images/avatar-4.png")
              (s/autocomplete-item-avatar-placeholder-chip "Tony Stark" "#A2A8E1" "TS"))))))
    (section :class "notes"
      (p
       "Add a container element "
       (code "(s/autocomplete)")
       ". There are 2 parts of it, one is  "
       (code "(s/autocomplete-input)")
       ", another is "
       (code "(s/autocomplete-list)")
       ". Spectre.css does not include JavaScript code, you will need to implement your JS to interact with the autocomplete.")
      (p "The autocomplete HTML structure is exampled below."))
    (hl/highlight :class "clojure"
      ;;{{
      (s/autocomplete
        ; autocomplete input container
        (s/autocomplete-input
          ; autocomplete chips
          (s/avatar-chip-input "Tony Stark" "images/avatar-1.png")
          (s/avatar-chip-input "Thor Odinson" "images/avatar-2.png" #{:selected})
          ; autocomplete real input box
          (s/input
            :text "text"
            :placeholder "typing here"))
        ; autocomplete suggestion list
        (s/autocomplete-list
          ; autocomplete list avatar chips
          (s/autocomplete-item-avatar-chip "Steve Rogers" "images/avatar-4.png")
          (s/autocomplete-item-avatar-placeholder-chip "Tony Stark" "#A2A8E1" "TS")))
      ;;}}
      )))

(def tooltips-section
  (section
    :id "tooltips"
    :class "container grid-960"
    (s/header (h4 "tooltips"))
    (section :class "notes"
      (p
       (strong "Tooltips")
       " provide context information labels that appear on hover and focus."))
    (s/columns :class "text-center"
      (div :column true
        (s/add-tooltip
          (s/button-primary "top tooltip")
          "Lorem ipsum"))
      (div :column true
        (s/add-tooltip
          (s/button-primary "right tooltip")
          "Lorem ipsum"
          :right))
      (div :column true
        (s/add-tooltip
          (s/button-primary "bottom tooltip")
          "Lorem ipsum"
          :bottom))
      (div :column true
        (s/add-tooltip
          (s/button-primary "left tooltip")
          "Lorem ipsum"
          :left)))
    (section :class "notes"
      (p "Tooltip component is built entirely in CSS.")
      (p
       "Use the function "
       (code "(s/add-tooltip tooltip-content position)")
       ", where position can be one of "
       (code ":right")
       ", "
       (code ":bottom")
       " or "
       (code ":left")
       " to define the position of a tooltip. By default, the tooltip appears above the element."))
    (hl/highlight :class "clojure"
      ;;{{
      (s/add-tooltip
        (s/button-primary "top tooltip")
        "Lorem ipsum")
      (s/add-tooltip
        (s/button-primary "right tooltip")
        "Lorem ipsum"
        :right)
      ;;}}
      )))


(def badges-section
  (section
    :id "badges"
    :class "container grid-960"
    (s/header (h4 "badges"))
    (section :class "notes"
      (p
       (strong "Badges")
       " are often used as unread number indicators."))
    (s/columns
      (div :column true
        (span :badge "1"
          "Notifications"))
      (div :column true
        (span :badge "99"
          "Notifications"))
      (div :column true
        (span :badge "999"
          "Notifications"))
      (div :column true
        (span :badge "…"
          "Notifications")))
    (section :class "notes"
      (p
       "Use the attribute "
       (code ":badge content")
       " to non self closing elements. "
       (code "content")
       " is content of a badge. The badge will appear in the top-right direction of the element."))
    (hl/highlight :class "clojure"
      ;;{{
      (span :badge "99"
        "Notifications")
      ;;}}
      )))

(def toasts-section
  (section
    :id "toasts"
    :class "container grid-960"
    (s/header (h4 "toasts"))
    (section :class "notes"
      (p
       (strong "Toasts")
       " are used to show alert or information to users."))
    (s/columns
      (div
        :column-sm 12
        :column 6
        (s/toast
          (s/button-clear :class "float-right")
          (s/icon "icon-error_outline")
          " Lorem ipsum dolor sit amet, consectetur adipiscing elit.")))
    (section :class "notes"
      (p
       "Use the element "
       (code "(s/toast)")
       ". You can add any text within the container, and even icons. You may also add a close button using "
       (code "(s/button-clear :class \"float-right\")")
       " if you need. "))
    (s/columns
      (div :column-sm 12
        (s/toast-primary
          (s/button-clear :class "float-right")
          (s/icon "icon-error_outline")
          " Lorem ipsum dolor sit amet, consectetur adipiscing elit."))
      (div :column-sm 12
        (s/toast-success
          (s/button-clear :class "float-right")
          (s/icon "icon-error_outline")
          " Lorem ipsum dolor sit amet, consectetur adipiscing elit."))
      (div :column-sm 12
        (s/toast-error
          (s/button-clear :class "float-right")
          (s/icon "icon-error_outline")
          " Lorem ipsum dolor sit amet, consectetur adipiscing elit.")))
    (section :class "notes"
      (p
       "And you can use the elements "
       (code "(s/toast-primary)")
       ", "
       (code "(s/toast-success)")
       " or "
       (code "(s/toast-error)")
       " for additional toast colors."))
    (hl/highlight :class "clojure"
      ;;{{
      (s/toast
        (s/button-clear :class "float-right")
        "Lorem ipsum dolor sit amet, consectetur adipiscing elit.")

      (s/toast-primary
        (s/button-clear :class "float-right")
        (s/icon "icon-error_outline" )
        "Lorem ipsum dolor sit amet, consectetur adipiscing elit.")
      ;;}}
      )))

(def menus-section
  (section
    :id "menus"
    :class "container grid-960"
    (s/header (h4 "menus"))
    (section :class "notes"
      (p
       "A "
       (strong "menu")
       " is a vertical list of links or buttons for actions and navigation."))
    (s/columns
      (div :column true
        (s/menu
          (s/menu-item
            (s/chip-big-avatar "Steve Rogers" "images/avatar-4.png"))
          (li :class "divider")
          (s/menu-link
            :options #{:active}
            :href "#menus"
            "My profile")
          (s/menu-link :href "#menus"
            "Settings")
          (s/menu-link :href "#menus"
            "Logout")))
      (div :column true
        (s/menu
          (s/menu-header "Go to")
          (s/menu-link :href "#menus"
            "Slack")
          (s/menu-link :href "#menus"
            "Hipchat")
          (s/menu-link :href "#menus"
            "Skype")))
      (div :column true
        (s/menu
          (s/menu-header "Go to")
          (s/menu-link :href "#menus"
            (s/icon "icon-link") " Slack")
          (s/menu-link :href "#menus"
            (s/icon "icon-link") " Hipchat")
          (s/menu-link :href "#menus"
            (s/icon "icon-link") " Skype"))))
    (section :class "notes"
      (p
       "Add a container element "
       (code "(s/menu)")
       ". And add child elements with "
       (code "(s/menu-item)")
       " or "
       (code "(s/menu-link)")
       ". You can separate menu items with a "
       (code "divider")
       " or "
       (code "(s/menu-header)")
       ". Spectre.css does not include JavaScript code, you will need to implement your JS to interact with the menus."))
    (hl/highlight :class "clojure"
      ;;{{
      (s/menu
        (s/menu-header "Go to")
        (s/menu-link :href "#"
          (s/icon "icon-link") "Slack")
        (s/menu-link :href "#"
          (s/icon "icon-link") "Hipchat")
        (s/menu-link :href "#"
          (s/icon "icon-link") "Skype")
        (li :class "divider") ; menu divider
        (s/menu-link :href "#"
          (s/icon "icon-link") "Settings"))
      ;;}}
      )))

(def dropdowns-section
  (section
    :id "dropdowns"
    :class "container grid-960"
    (s/header (h4 "dropdowns"))
    (section :class "notes"
      (p
       "A "
       (strong "dropdown")
       " is a combination of buttons and menus."))
    (s/columns
      (div
        :column-xs 6
        (s/dropdown
          ((s/dropdown-group-button
            "dropdown button")
          (s/menu
            (s/menu-item "Slack")
            (s/menu-item "Hipchat")
            (s/menu-item "Skype")))))
      (div
        :column-xs 6
        (s/dropdown
          (s/dropdown-simple-button :options #{:primary}
            "dropdown button " (i :class "icon-caret"))
          (s/menu
            (s/menu-item "Slack")
            (s/menu-item "Hipchat")
            (s/menu-item "Skype"))))
      (div
        :column-xs 6
        (s/dropdown
          (s/dropdown-simple-button :options #{:link}
            "dropdown button " (i :class "icon-caret"))
          (s/menu
            (s/menu-item "Slack")
            (s/menu-item "Hipchat")
            (s/menu-item "Skype")))))
    (section :class "notes"
      (p "Dropdown menus component is built entirely in CSS. It is triggered by "
        (code ":focus")
        " event.")
      (p "Add a container element "
        (code "(s/dropdown)")
        ". And add button or a group-button "
        (code "(s/dropdown-simple-button)")
        " or "
        (code "(s/dropdown-group-button)")
        " and a "
        (code "(s/menu)")
        " right next to it"))
    (section :class "notes"
      (p "Also, you can implement your JS to interact with the dropdown menus by adding the class "
        (code "active")
        " to the dropdown."))
    (hl/highlight :class "clojure"
      ;;{{
      (s/dropdown
        ; basic dropdown button
        (s/dropdown-simple-button :options #{:link}
          "dropdown button " (i :class "icon-caret"))
        ; menu component
        (s/menu
          (s/menu-item "Slack")
          (s/menu-item "Hipchat")
          (s/menu-item "Skype")))
      (s/dropdown
        ; dropdown button group
        ((s/dropdown-group-button
           "dropdown button")
         ; menu component
         (s/menu
           (s/menu-item "Slack")
           (s/menu-item "Hipchat")
           (s/menu-item "Skype"))))
      ;;}}
      )))

(def navigation-menu
  (section
    :id "navigation"
    :class "container grid-960"
    (s/header (h4 "navigation"))
    (section :class "notes"
      (p
       (strong "Navigation")
       " includes several components, including breadcrumbs and tabs."))
    (s/header :id "breadcrumbs"
      (h5 "breadcrumbs"))
    (s/columns
      (div :column true
        (s/breadcrumb
          (s/breadcrumb-item :href "#breadcrumbs"
            "Home")
          (s/breadcrumb-item :href "#breadcrumbs"
            "Profile")
          (s/breadcrumb-item :href "#breadcrumbs"
            "Change avatar"))))
    (section :class "notes"
      (p
       "Use the element "
       (code "(s/breadcrumb)")
       ". And add child elements with the element "
       (code "(s/breadcrumb-item)")
       "."))
    (hl/highlight :class "clojure"
      ;;{{
      (s/breadcrumb
        (s/breadcrumb-item :href "#breadcrumbs"
          "Home")
        (s/breadcrumb-item :href "#breadcrumbs"
          "Profile")
        (s/breadcrumb-item :href "#breadcrumbs"
          "Change avatar"))
      ;;}}
      )
    (s/header :id "tabs"
      (h5 "tabs"))
    (s/columns
      (div :column-xs 12
        (s/tab
          (s/tab-item
            :options #{:active}
            :href "#tabs"
            "Music")
          (s/tab-item :href "#tabs"
            "Playlists")
          (s/tab-item :href "#tabs"
            "Radio")
          (s/tab-item :href "#tabs"
            "Connect")))
      (div :column-xs 12
        (s/tab :options #{:block}
          (s/tab-item
            :options #{:active}
            :href "#tabs"
            "Music")
          (s/tab-item :href "#tabs"
            "Playlists")
          (s/tab-item :href "#tabs"
            "Radio")
          (s/tab-item :href "#tabs"
            "Connect"))))
    (section :class "notes"
      (p
       "Use a element "
       (code "(s/tab)")
       ". And add child elements "
       (code "(s/tab-item)")
       ". You can add "
       (code ":options #{:block}")
       " for a full-width tab."))
    (hl/highlight :class "clojure"
      ;;{{
      (s/tab :options #{:block}
        (s/tab-item
          :options #{:active}
          :href "#tabs"
          "Music")
        (s/tab-item :href "#tabs"
          "Playlists")
        (s/tab-item :href "#tabs"
          "Radio")
        (s/tab-item :href "#tabs"
          "Connect"))
      ;;}}
      )
    (s/columns
      (div :column-xs 12
        (s/tab
          (s/tab-item
            :options #{:active}
            :href "#tabs"
            :badge "9"
            "Music")
          (s/tab-item :href "#tabs"
            "Playlists")
          (s/tab-item :href "#tabs"
            "Radio")
          (s/tab-item :href "#tabs"
            "Connect")))
      (div :column true
        (s/tab :options #{:block}
          (s/tab-item
            :options #{:active}
            :href "#tabs"
            :badge "9"
            "Music")
          (s/tab-item :href "#tabs"
            "Playlists")
          (s/tab-item :href "#tabs"
            "Radio")
          (s/tab-item :href "#tabs"
            "Connect"))))
    (section :class "notes"
      (p
       "If you need "
       (code "badges")
       " on tabs, you can use the "
       (code ":badge")
       " attribute in the element "
       (code "(s/tab-item)")
       "."))
    (hl/highlight :class "clojure"
      ;;{{
      (s/tab :options #{:block}
        (s/tab-item
          :options #{:active}
          :href "#tabs"
          :badge "9"
          "Music"))
      ;;}}
      )
    (s/header :id "pagination"
      (h5 "pagination"))
    (s/columns
      (div :column-xs 12
        (s/pagination
          (s/page-item :href "#pagination"
            "Previous")
          (s/page-item :href "#pagination"
            "1")
          (s/page-item "…")
          (s/page-item :href "#pagination"
            "6")
          (s/page-item
            :options #{:active}
            :href "#pagination"
            "7")
          (s/page-item :href "#pagination"
            "8")
          (s/page-item "…")
          (s/page-item :href "#pagination"
            "12")
          (s/page-item :href "#pagination"
            "Next")))
      (div
        :column-xs 12
        (s/pagination
          (s/page-item
            :class "disabled"
            :href "#pagination"
            "Previous")
          (s/page-item
            :options #{:active}
            :href "#pagination"
            "1")
          (s/page-item :href "#pagination"
            "2")
          (s/page-item :href "#pagination"
            "3")
          (s/page-item "…")
          (s/page-item :href "#pagination"
            "12")
          (s/page-item :href "#pagination"
            "Next"))))
    (section
      :class "notes"
      (p
       "Add a container element "
       (code "(s/pagination)")
       ". And add child elements "
       (code "(s/page-item)")
       "."))
    (hl/highlight :class "clojure"
      ;;{{
      (s/pagination
        (s/page-item
          :class "disabled"
          :href "#pagination"
          "Previous")
        (s/page-item
          :options #{:active}
          :href "#pagination"
          "1")
        (s/page-item :href "#pagination"
          "2")
        (s/page-item :href "#pagination"
          "3")
        (s/page-item "…")
        (s/page-item :href "#pagination"
          "12")
        (s/page-item :href "#pagination"
          "Next"))
      ;;}}
      )))

(defc modal-options-cell #{})
(defc modal-sm-1-options-cell #{:sm})
(defc modal-sm-2-options-cell #{:sm})

(def modals-section
  (section
    :id "modals"
    :class "container grid-960"
    (s/header (h4 "modals"))
    (section :class "notes"
      (p (strong "Modals") " are flexible dialog prompts."))
    (s/columns
      (div :column-xs 12
        (s/modal :options modal-options-cell
          (s/modal-header
            (s/button-clear
              :class "float-right"
              :click #(swap! modal-options-cell disj :active))
            (s/modal-title "Modal title"))
          (s/modal-body
            (p
             "This is the content inside the modal.")
            (h4 "Lorem ipsum")
            (p
             "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent risus leo, dictum in vehicula sit amet, feugiat tempus tellus. Duis quis sodales risus. Etiam euismod ornare consequat.")
            (p
             "Climb leg rub face on everything give attitude nap all day for under the bed. Chase mice attack feet but rub face on everything hopped up on goofballs.")
            (h4 "Cupcake ipsum")
            (p
             "Jelly-o sesame snaps halvah croissant oat cake cookie. Cheesecake bear claw topping. Chupa chups apple pie carrot cake chocolate cake caramels.")
            (p
             "De braaaiiiins apocalypsi gorger omero prefrontal cortex undead survivor fornix dictum mauris. Hi brains mindless mortuis limbic cortex soulless creaturas optic nerve.")
            (h4 "Candy ipsum")
            (p
             "Efficiently unleash cross-media information without cross-media value. Quickly maximize timely deliverables for real-time schemas. Dramatically maintain clicks-and-mortar.")
            (p
             "Caerphilly swiss fromage frais. Brie cheese and wine fromage frais chalk and cheese danish fontina smelly cheese who moved my cheese cow."))
          (s/modal-footer
            (s/button-link :click #(swap! modal-options-cell disj :active)
              "Close")
            (s/button-primary "Share")))
        (s/button-primary :click #(swap! modal-options-cell conj :active)
          "Show the modal")))
    (section :class "notes"
      (p
       "Add a container element with the class "
       (code "modal")
       ". And add a real container "
       (code "modal-container")
       " and overlay "
       (code "modal-overlay")
       " inside it. You can add child elements with the class name "
       (code "modal-header")
       ", "
       (code "modal-content")
       " and "
       (code "modal-footer")
       " - any or all of them. ")
      (p
       "Spectre.css does not include JavaScript code, you will need to implement your JS to interact with modals. To make a modal appear, add the class "
       (code "active")
       " to the "
       (code "modal")
       " container."))
    (hl/highlight :class "clojure"
      ;;{{
      ; modal-options-cell has the options for the modal. When the option :active is set
      ; the modal is show.
      (defc modal-options-cell #{})

      (s/modal :options modal-options-cell
        (s/modal-header
          (s/button-clear
            :class "float-right"
            :click #(swap! modal-options-cell disj :active) ; on click removes the :active option
            )
          (s/modal-title "Modal title"))
        (s/modal-body
          ; content goes here
          )
        (s/modal-footer
          (s/button-link :click #(swap! modal-options-cell disj :active) ; on click removes the :active option
            "Close")
          (s/button-primary "Share")))

      (s/button-primary :click #(swap! modal-options-cell conj :active) ; on click sets the :active option
        "Show the modal")
      ;;}}
      )
    (s/header  (h5 "modal sizes"))
    (s/columns
      (div :column-xs 12
        (s/modal :options modal-sm-1-options-cell
          (s/modal-header
            (s/button-clear
              :class "float-right"
              :click #(swap! modal-sm-1-options-cell disj :active))
            (s/modal-title "Modal 1 title"))
          (s/modal-body
            (div :class "content"
              "Lorem ipsum dolor sit amet, consectetur adipiscing elit."))
          (s/modal-footer
            (s/button-link :click #(swap! modal-sm-1-options-cell disj :active)
              "Close")
            (s/button-primary "Share")))
        (s/button-primary :click #(swap! modal-sm-1-options-cell conj :active)
          "Show the modal 1"))
      (div :column-xs 12
        (s/modal :options modal-sm-2-options-cell
          (s/modal-header
            (s/button-clear
              :class "float-right"
              :click #(swap! modal-sm-2-options-cell disj :active))
            (s/modal-title "Modal 2 title"))
          (s/modal-body
            (form
              (s/form-group
                (s/form-label "Name")
                (s/input
                  :type "text"
                  :placeholder "Name"))
              (s/form-group
                (s/form-label "Gender")
                (s/input-radio :name "gender"
                  "Male")
                (s/input-radio :name "gender"
                  "Female"))))
          (s/modal-footer
            (s/button-link :click #(swap! modal-sm-2-options-cell disj :active)
              "Close")
            (s/button-primary "Share")))
        (s/button-primary :click #(swap! modal-sm-2-options-cell conj :active)
          "Show the modal 2")))
    (section :class "notes"
      (p
       "Add the attribute "
       (code ":options #{:sm}")
       " for a smaller modal dialog. "))
    (hl/highlight :class "clojure"
      ;;{{
      (defc modal-sm-options-cell #{:sm})

      (s/modal :options modal-sm-options-cell
        ; modal structure here
        )

      (s/button-primary :click #(swap! modal-sm-options-cell conj :active)
        "Show the modal small")
      ;;}}
      )))

(def cards-section
  (section
    :id "cards"
    :class "container grid-960"
    (s/header (h4 "cards"))
    (section :class "notes"
      (p (strong "Cards") " are flexible content containers."))
    (s/columns
      (div
        :column 4
        :column-xs 12
        (s/card
          (s/card-image
            :src "images/osx-el-capitan.jpg")
          (s/card-header
            (h4 :class "card-title"
              "Microsoft")
            (h6 :class "card-meta"
              "Software and hardware"))
          (s/card-body
            "Empower every person and every organization on the planet to achieve more.")
          (s/card-footer
            (s/a-button-primary :href "#"
             "Do"))))
      (div
        :column 4
        :column-xs 12
        (s/card
          (s/card-header
            (h4 :class "card-title"
              "Apple")
            (h6 :class "card-meta"
              "Hardware and software"))
          (s/card-image
            :src "images/osx-yosemite.jpg")
          (s/card-body
            "To make a contribution to the world by making tools for the mind that advance humankind.")
          (s/card-footer
            (s/button-group :options #{:block}
              (s/button-primary "Buy")
              (s/button "Buy")
              (s/button "Buy")))))
      (div
        :column 4
        :column-xs 12
        (s/card
          (s/card-header
            (h4 :class "card-title"
              "Google")
            (h6 :class "card-meta"
              "Software and hardware"))
          (s/card-body
            "Organize the world’s information and make it universally accessible and useful.")
          (s/card-image
            :src "images/osx-yosemite-2.jpg")
          (s/card-footer
            (s/a-button-primary :href "#" "Search")
            (s/a-button-link :href "#" "Share")))))
    (s/columns
      (div
        :column 4
        :column-xs 12
        (s/card
          (s/card-image
            :src "images/osx-el-capitan.jpg")
          (s/card-footer
            (s/a-button-primary :href "#" "Buy")
            (s/a-button-link :href "#" "Share"))
          (s/card-body
            (strong "Surface Studio")
            ". Turn your desk into a Studio. Surface Studio is designed for the creative process.")))
      (div
        :column 4
        :column-xs 12
        (s/card
          (s/card-header
            (h4 :class "card-title"
              "Apple")
            (h6 :class "card-meta"
              "Hardware and software"))
          (s/card-body
            "To make a contribution to the world by making tools for the mind that advance humankind.")
          (s/card-image
            :src "images/osx-yosemite.jpg")))
      (div
        :column 4
        :column-xs 12
        (s/card
          (s/card-header
            (h4 :class "card-title"
              "Google I/O"))
          (s/card-body
            "An immersive, three-day experience focused on exploring the next generation of technology, mobile and beyond.")
          (s/card-footer
            ))))
    (section :class "notes"
      (p
       "Add a container element "
       (code "(s/card)")
       ". And add child elements "
       (code "(s/card-image)")
       ", "
       (code "(s/card-header)")
       ", "
       (code "(s/card-body)")
       " and/or "
       (code "(s/card-footer)")
       ". The "
       (code "(s/card-image)")
       " can be placed in any position. "))
    (hl/highlight :class "clojure"
      ;;{{
      (s/card
        (s/card-image
          :src "images/osx-el-capitan.jpg")
        (s/card-header
          (h4 :class "card-title"
            "Microsoft")
          (h6 :class "card-meta"
            "Software and hardware"))
        (s/card-body
          "Empower every person and every organization on the planet to achieve more.")
        (s/card-footer
          (s/a-button-primary :href "#"
            "Do")))
      ;;}}
      )))

(def utilities-header
  (generic-header
    "utilities"
    (section :class "notes text-center"
      (s/button-group
        (s/a-button-primary :href "#position"
          "position")
        (s/a-button-primary :href "#display"
          "display")
        (s/a-button-primary :href "#text"
          "text")
        (s/a-button-primary :href "#shapes"
          "shapes")
        (s/a-button-primary :href "#loading"
          "loading")))))

(def position-section
  (section
    :id "position"
    :class "container grid-960"
    (section :class "notes"
      (p
       (strong "Position utilities")
       " are used for useful layout and position things, including clearfix, float, position and margin/padding utilities."))
    (hl/highlight :class "clojure"
      ;;{{
      ; clear float
      (div :class "clearfix")
      ; float: left and right
      (div :class "float-left")
      (div :class "float-right")
      ; position: relative, absolute and fixed
      (div :class "rel")
      (div :class "abs")
      (div :class "fixed")
      ; centered block
      (div :class "centered")
      ; margin: 10px and 5px in 4 directions. mt-10 = margin-top: 10px;
      (div :class "mt-10")
      (div :class "mt-5")
      ; padding: 10px and 5px in 4 directions. pt-10 = padding-top: 10px;
      (div :class "pt-10")
      (div :class "pt-5")
      ;;}}
      )))

(def display-section
  (section
    :id "display"
    :class "container grid-960"
    (section :class "notes"
      (p
       (strong "Display utilities")
       " are used for display and hidden things."))
    (hl/highlight :class "clojure"
      ;;{{
      ; display: block;
      (div :class "block")
      ; display: inline;
      (div :class "inline")
      ; display: inline-block;
      (div :class "inline-block")
      ; display: flex;
      (div :class "flex")
      ; display: inline-flex;
      (div :class "inline-flex")
      ; display: none;
      (div :class "hide")
      ; visibility: visible;
      (div :class "visible")
      ; visibility: hidden;
      (div :class "invisible")
      ; hide text contents
      (div :class "text-hide")
      ;;}}
      )))

(def text-section
  (section
    :id "text"
    :class "container grid-960"
    (section :class "notes"
      (p
       (strong "Text utilities")
       " are used for text alignment, styles and overflow things."))
    (hl/highlight :class "clojure"
      ;;{{
      ; left-aligned text
      (div :class "text-left")
      ; center-aligned text
      (div :class "text-center")
      ; right-aligned text
      (div :class "text-right")
      ; justified text
      (div :class "text-justify")

      ; Lowercased text
      (div :class "text-lowercase")
      ; Uppercased text
      (div :class "text-uppercase")
      ; Capitalized text
      (div :class "text-capitalize")

      ; Normal weight text
      (div :class "text-normal")
      ; Bold text
      (div :class "text-bold")
      ; Italicized text
      (div :class "text-italic")

      ; Overflow behavior: display an ellipsis to represent clipped text
      (div :class "text-ellipsis")
      ; Overflow behavior: truncate the text
      (div :class "text-clip")
      ; Text may be broken at arbitrary points
      (div :class "text-break")
      ;;}}
      )))

(def shapes-section
  (section
    :id "shapes"
    :class "container grid-960"
    (section :class "notes"
      (p
       (strong "Shape utilities")
       " are used for change element shapes."))
    (hl/highlight :class "clojure"
      ;;{{
      ; rounded element
      (div :class "rounded")
      ; circle element
      (div :class "circle")
      ;;}}
      )))

(def divider-section
  (section
    :id "divider"
    :class "container grid-960"
    (section :class "notes"
      (p
       "A "
       (strong "Divider")
       " is used for separating elements."))
    (s/columns
      (div :column true (div :class "divider")))
    (hl/highlight :class "clojure"
      ;;{{
      ; divider element
      (div :class "divider")
      (s/divider)
      ;;}}
      )))

(def loading-section
  (section
    :id "loading"
    :class "container grid-960"
    (section
      :class "notes"
      (p
       (strong "Loading indicator")
       " is used for loading or updating. Also, you can add the class "
       (code "loading")
       " to buttons for loading status."))
    (s/columns
      (div :column true (div :class "loading")))
    (hl/highlight
      :class "clojure"
      ;;{{
      ; loading element
      (div :class "loading")
      (s/loading)
      ;;}}
      )))

(def page-footer
  (footer :class "bg-grey"
    (section
      :id "copyright"
      :class "grid-footer container grid-960"
      (p
       (a
        :href "https://github.com/mynomoto/hoplon-spectre.css"
        :target "_blank"
        "GitHub Repo")
       " | "
       (a :href "#"
        "Back to top")
       " | version: 0.1.32-0")
      (p
       "Designed and built with love by "
       (a
        :href "https://github.com/mynomoto"
        :target "_blank"
        "mynomoto")
       ". Licensed under the "
       (a
        :href "https://github.com/mynomoto/hoplon-spectre.css/LICENSE"
        :target "_blank"
        "EPL license")
       "."))))

(html
  html-head
  (body
    page-header
    (section
      :class "section"
      getting-started
      compiling-custom-version
      elements-header
      typography-section
      tables-section
      buttons-section
      form-section
      labels-section
      media-section
      layout-header
      grid-section
      responsive-section
      navbar-section
      empty-section
      components-header
      avatar-section
      chips-section
      autocomplete-section
      tooltips-section
      badges-section
      toasts-section
      menus-section
      dropdowns-section
      navigation-menu
      modals-section
      cards-section
      utilities-header
      position-section
      display-section
      text-section
      shapes-section
      divider-section
      loading-section)
    page-footer))
